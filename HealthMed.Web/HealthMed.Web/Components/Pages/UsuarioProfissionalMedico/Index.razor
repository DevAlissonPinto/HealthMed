@page "/UsuarioProfissionalMedico/index"
@using HealthMed.Web.Models
@using HealthMed.Domain.Interfaces.Application
@using HealthMed.Infra.Repository.Context
@using AutoMapper

@inject NavigationManager navManager
@inject IUsuarioApplication<HealthMedContext> _usuarioApplication
@inject IMapper _mapper

@rendermode InteractiveServer

<PageTitle>Siss Saúde - Usuários</PageTitle>

<div class="pagetitle">
    <h1>Listagem de Usuários Profissionais</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/"><i class="bi bi-house-fill"></i></a></li>
            <li class="breadcrumb-item active">Usuários</li>
        </ol>
    </nav>
</div>

@if (showConfirmation)
{
    <div class="modal show" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5);" @onclick="CloseModal">
        <div class="modal-dialog">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p>@Body</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Excluir</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="card">
    <div class="card-header">Usuários Cadastrados</div>
    <div class="card-body">
        @if (Usuarios == null || Usuarios.Count == 0)
        {
            <p><em>@Mensagem</em></p>
        }
        else
        {
            <!-- Tabela de usuários -->
            <table class="table">
                <thead>
                    <tr>
                        <th class="col-2">Id</th>
                        <th class="col-4">Nome</th>
                        <th class="col-4">Email</th>
                        <th class="col-2 text-center">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var model in Usuarios)
                    {
                        <tr>
                            <td>@model.Id.ToString()</td>
                            <td>@model.Nome</td>
                            <td>@model.Email</td>
                            <td class="text-center">
                                <!-- Botão de edição com ícone, que navega para a página de edição passando o Id -->
                                <NavLink class="btn btn-primary btn-md" href="@($"/UsuarioProfissionalMedico/{model.Id}")">
                                    <i class="bi bi-pencil-square"></i>
                                </NavLink>
                                <!-- Botão de exclusão com ícone, que mostra a confirmação de exclusão -->
                                <button class="btn btn-danger btn-md" @onclick="() => ShowDeleteConfirmation(model.Id)">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<div class="text-end mt-4">
    <a href="UsuarioProfissionalMedico/" class="btn btn-primary">
        <i class="bi bi-plus-circle"></i> Cadastrar Novo Usuário
    </a>
</div>

@code {
    private List<UsuarioProfissionalViewModel> Usuarios { get; set; } = new();
    public string Mensagem { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Mensagem = "Carregando...";

            MapperUsuarios(await CarregarUsuarios());

            if (Usuarios == null || Usuarios.Count == 0)
                Mensagem = "Não há usuários registrados no sistema.";
        }
        catch (Exception ex)
        {
            Mensagem = "Não há usuários registrados no sistema.";
            Console.WriteLine($"Erro ao carregar os usuários: {ex.Message}");
        }
    }

    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Body { get; set; } = string.Empty;

    private int selectedUsuarioId;
    private bool showConfirmation = false;

    private void ShowDeleteConfirmation(int usuarioId)
    {
        selectedUsuarioId = usuarioId;
        Title = "Confirmar Exclusão";
        Body = "Tem certeza de que deseja excluir este usuário?";
        showConfirmation = true;
    }

    private void CloseModal()
    {
        showConfirmation = false;
        StateHasChanged(); // Força a atualização do estado da UI
    }

    private async Task ConfirmDelete()
    {
        try
        {
            await _usuarioApplication.DeleteAsync(selectedUsuarioId);

            MapperUsuarios(await CarregarUsuarios());

            if (Usuarios == null || Usuarios.Count == 0)
                Mensagem = "Não há usuários registrados no sistema.";

            CloseModal();
        }
        catch (Exception ex)
        {
            Mensagem = "Ocorreu um erro ao deletar o usuário.";
            Console.WriteLine($"Ocorreu um erro ao deletar o usuário: {ex.Message}");
        }
    }

    private async Task<IEnumerable<UsuarioProfissionalViewModel>> CarregarUsuarios()
    {
        try
        {
            var usuarios = await _usuarioApplication.GetAllAsync();
            return _mapper.Map<IEnumerable<UsuarioProfissionalViewModel>>(usuarios);
        }
        catch (Exception ex)
        {
            // ErrorMessage = "Falha ao carregar usuários. " + ex.Message;
            Console.WriteLine($"Erro ao carregar os usuários: {ex.Message}");
            return Enumerable.Empty<UsuarioProfissionalViewModel>();
        }
    }

    private void MapperUsuarios(IEnumerable<UsuarioProfissionalViewModel> usuarios) => Usuarios = _mapper.Map<List<UsuarioProfissionalViewModel>>(usuarios);
}
