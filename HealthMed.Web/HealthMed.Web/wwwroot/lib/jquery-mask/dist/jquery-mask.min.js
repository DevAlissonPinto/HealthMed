/*! jQuery Validation Plugin - v1.17.0 - 7/29/2017
 * https://jqueryvalidation.org/
 * Copyright (c) 2017 JÃ¶rn Zaefferer; Licensed MIT */
!function (a, t, e) { "function" == typeof define && define.amd ? define(["jquery"], a) : "object" == typeof exports ? module.exports = a(require("jquery")) : a(t || e) }(function (a) { "use strict"; var t = function (t, e, n) { var s = { invalid: [], getCaret: function () { try { var a, e = 0, n = t.get(0), r = document.selection, o = n.selectionStart; return r && -1 === navigator.appVersion.indexOf("MSIE 10") ? ((a = r.createRange()).moveStart("character", -s.val().length), e = a.text.length) : (o || "0" === o) && (e = o), e } catch (i) { } }, setCaret: function (a) { try { if (t.is(":focus")) { var e, n = t.get(0); n.setSelectionRange ? n.setSelectionRange(a, a) : ((e = n.createTextRange()).collapse(!0), e.moveEnd("character", a), e.moveStart("character", a), e.select()) } } catch (s) { } }, events: function () { t.on("keydown.mask", function (a) { t.data("mask-keycode", a.keyCode || a.which), t.data("mask-previus-value", t.val()), t.data("mask-previus-caret-pos", s.getCaret()), s.maskDigitPosMapOld = s.maskDigitPosMap }).on(a.jMaskGlobals.useInput ? "input.mask" : "keyup.mask", s.behaviour).on("paste.mask drop.mask", function () { setTimeout(function () { t.keydown().keyup() }, 100) }).on("change.mask", function () { t.data("changed", !0) }).on("blur.mask", function () { i === s.val() || t.data("changed") || t.trigger("change"), t.data("changed", !1) }).on("blur.mask", function () { i = s.val() }).on("focus.mask", function (t) { !0 === n.selectOnFocus && a(t.target).select() }).on("focusout.mask", function () { n.clearIfNotMatch && !r.test(s.val()) && s.val("") }) }, getRegexMask: function () { for (var a, t, n, s, r, i, l = [], c = 0; c < e.length; c++)(a = o.translation[e.charAt(c)]) ? (t = a.pattern.toString().replace(/.{1}$|^.{1}/g, ""), n = a.optional, (s = a.recursive) ? (l.push(e.charAt(c)), r = { digit: e.charAt(c), pattern: t }) : l.push(n || s ? t + "?" : t)) : l.push(e.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")); return i = l.join(""), r && (i = i.replace(RegExp("(" + r.digit + "(.*" + r.digit + ")?)"), "($1)?").replace(RegExp(r.digit, "g"), r.pattern)), RegExp(i) }, destroyEvents: function () { t.off("input.mask keydown.mask keyup.mask paste.mask drop.mask blur.mask focusout.mask ") }, val: function (a) { var e, n = t.is("input") ? "val" : "text"; return arguments.length > 0 ? (t[n]() !== a && t[n](a), e = t) : e = t[n](), e }, calculateCaretPosition: function () { var a = t.data("mask-previus-value") || "", e = s.getMasked(), n = s.getCaret(); if (a !== e) { var r = t.data("mask-previus-caret-pos") || 0, o = e.length, i = a.length, l = 0, c = 0, u = 0, k = 0, f = 0; for (f = n; f < o && s.maskDigitPosMap[f]; f++)c++; for (f = n - 1; f >= 0 && s.maskDigitPosMap[f]; f--)l++; for (f = n - 1; f >= 0; f--)s.maskDigitPosMap[f] && u++; for (f = r - 1; f >= 0; f--)s.maskDigitPosMapOld[f] && k++; if (n > i) n = 10 * o; else if (r >= n && r !== i) { if (!s.maskDigitPosMapOld[n]) { var h = n; n -= k - u, n -= l, s.maskDigitPosMap[n] && (n = h) } } else n > r && (n += u - k, n += c) } return n }, behaviour: function (e) { e = e || window.event, s.invalid = []; var n = t.data("mask-keycode"); if (-1 === a.inArray(n, o.byPassKeys)) { var r = s.getMasked(), i = s.getCaret(); return setTimeout(function () { s.setCaret(s.calculateCaretPosition()) }, a.jMaskGlobals.keyStrokeCompensation), s.val(r), s.setCaret(i), s.callbacks(e) } }, getMasked: function (a, t) { var r, i, l, c = [], u = void 0 === t ? s.val() : t + "", k = 0, f = e.length, h = 0, p = u.length, v = 1, d = "push", m = -1, g = 0, $ = []; for (n.reverse ? (d = "unshift", v = -1, i = 0, k = f - 1, h = p - 1, l = function () { return k > -1 && h > -1 }) : (i = f - 1, l = function () { return k < f && h < p }); l();) { var M = e.charAt(k), y = u.charAt(h), _ = o.translation[M]; _ ? (y.match(_.pattern) ? (c[d](y), _.recursive && (-1 === m ? m = k : k === i && k !== m && (k = m - v), i === m && (k -= v)), k += v) : y === r ? (g--, r = void 0) : _.optional ? (k += v, h -= v) : _.fallback ? (c[d](_.fallback), k += v, h -= v) : s.invalid.push({ p: h, v: y, e: _.pattern }), h += v) : (a || c[d](M), y === M ? ($.push(h), h += v) : (r = M, $.push(h + g), g++), k += v) } var b = e.charAt(i); f !== p + 1 || o.translation[b] || c.push(b); var C = c.join(""); return s.mapMaskdigitPositions(C, $, p), C }, mapMaskdigitPositions: function (a, t, e) { var r = n.reverse ? a.length - e : 0; s.maskDigitPosMap = {}; for (var o = 0; o < t.length; o++)s.maskDigitPosMap[t[o] + r] = 1 }, callbacks: function (a) { var r = s.val(), o = r !== i, l = [r, a, t, n], c = function (a, t, e) { "function" == typeof n[a] && t && n[a].apply(this, e) }; c("onChange", !0 === o, l), c("onKeyPress", !0 === o, l), c("onComplete", r.length === e.length, l), c("onInvalid", s.invalid.length > 0, [r, a, t, s.invalid, n]) } }; t = a(t); var r, o = this, i = s.val(); e = "function" == typeof e ? e(s.val(), void 0, t, n) : e, o.mask = e, o.options = n, o.remove = function () { var a = s.getCaret(); return o.options.placeholder && t.removeAttr("placeholder"), t.data("mask-maxlength") && t.removeAttr("maxlength"), s.destroyEvents(), s.val(o.getCleanVal()), s.setCaret(a), t }, o.getCleanVal = function () { return s.getMasked(!0) }, o.getMaskedVal = function (a) { return s.getMasked(!1, a) }, o.init = function (i) { if (i = i || !1, n = n || {}, o.clearIfNotMatch = a.jMaskGlobals.clearIfNotMatch, o.byPassKeys = a.jMaskGlobals.byPassKeys, o.translation = a.extend({}, a.jMaskGlobals.translation, n.translation), o = a.extend(!0, {}, o, n), r = s.getRegexMask(), i) s.events(), s.val(s.getMasked()); else { n.placeholder && t.attr("placeholder", n.placeholder), t.data("mask") && t.attr("autocomplete", "off"); for (var l = 0, c = !0; l < e.length; l++) { var u = o.translation[e.charAt(l)]; if (u && u.recursive) { c = !1; break } } c && t.attr("maxlength", e.length).data("mask-maxlength", !0), s.destroyEvents(), s.events(); var k = s.getCaret(); s.val(s.getMasked()), s.setCaret(k) } }, o.init(!t.is("input")) }; a.maskWatchers = {}; var e = function () { var e = a(this), s = {}, r = "data-mask-", o = e.attr("data-mask"); if (e.attr(r + "reverse") && (s.reverse = !0), e.attr(r + "clearifnotmatch") && (s.clearIfNotMatch = !0), "true" === e.attr(r + "selectonfocus") && (s.selectOnFocus = !0), n(e, o, s)) return e.data("mask", new t(this, o, s)) }, n = function (t, e, n) { n = n || {}; var s = a(t).data("mask"), r = JSON.stringify, o = a(t).val() || a(t).text(); try { return "function" == typeof e && (e = e(o)), "object" != typeof s || r(s.options) !== r(n) || s.mask !== e } catch (i) { } }, s = function (a) { var t, e = document.createElement("div"); return (t = (a = "on" + a) in e) || (e.setAttribute(a, "return;"), t = "function" == typeof e[a]), e = null, t }; a.fn.mask = function (e, s) { s = s || {}; var r = this.selector, o = a.jMaskGlobals, i = o.watchInterval, l = s.watchInputs || o.watchInputs, c = function () { if (n(this, e, s)) return a(this).data("mask", new t(this, e, s)) }; return a(this).each(c), r && "" !== r && l && (clearInterval(a.maskWatchers[r]), a.maskWatchers[r] = setInterval(function () { a(document).find(r).each(c) }, i)), this }, a.fn.masked = function (a) { return this.data("mask").getMaskedVal(a) }, a.fn.unmask = function () { return clearInterval(a.maskWatchers[this.selector]), delete a.maskWatchers[this.selector], this.each(function () { var t = a(this).data("mask"); t && t.remove().removeData("mask") }) }, a.fn.cleanVal = function () { return this.data("mask").getCleanVal() }, a.applyDataMask = function (t) { ((t = t || a.jMaskGlobals.maskElements) instanceof a ? t : a(t)).filter(a.jMaskGlobals.dataMaskAttr).each(e) }; var r = { maskElements: "input,td,span,div", dataMaskAttr: "*[data-mask]", dataMask: !0, watchInterval: 300, watchInputs: !0, keyStrokeCompensation: 10, useInput: !/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) && s("input"), watchDataMask: !1, byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91], translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: !0 }, "#": { pattern: /\d/, recursive: !0 }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } } }; a.jMaskGlobals = a.jMaskGlobals || {}, (r = a.jMaskGlobals = a.extend(!0, {}, r, a.jMaskGlobals)).dataMask && a.applyDataMask(), setInterval(function () { a.jMaskGlobals.watchDataMask && a.applyDataMask() }, r.watchInterval) }, window.jQuery, window.Zepto);