@page "/UsuarioProfissionalMedico/{Id:int?}"
@using HealthMed.Web.Models
@using HealthMed.Domain.Interfaces.Application
@using HealthMed.Infra.Repository.Context
@using HealthMed.Domain.Entities;
@using AutoMapper

@inject NavigationManager navManager
@inject IUsuarioApplication<HealthMedContext> _usuarioApplication
@inject IMapper _mapper

@rendermode InteractiveServer

<PageTitle>HealthMed - @((Model.Id == 0 ? "Cadastro de Usuário Profissional Médico" : "Edição de Usuário Profissional Médico"))</PageTitle>

<div class="pagetitle">
    <h1>@(Model.Id == 0 ? "Cadastro de Usuário Profissional Médico" : "Edição de Usuário Profissional Médico")</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/"><i class="bi bi-house-fill"></i></a></li>
            <li class="breadcrumb-item"><a href="/usuario">Usuário</a></li>
            <li class="breadcrumb-item active">@(Model.Id == 0 ? "Cadastro" : "Edição")</li>
        </ol>
    </nav>
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<div class="card">
    <div class="card-header">Informações do Usuário</div>
    <div class="card-body">

        <EditForm Model="@Model" OnValidSubmit="OnValidSubmitAsync">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-4 pb-2">
                    <label class="form-label">Nome do Usuário:</label>
                    <InputText @bind-Value="Model.Nome" class="form-control" />
                    <ValidationMessage For="@(() => Model.Nome)" />
                </div>
                <div class="col-md-4 pb-2">
                    <label class="form-label">CPF:</label>
                    <InputText @bind-Value="Model.Cpf" class="form-control" />
                    <ValidationMessage For="@(() => Model.Cpf)" />
                </div>
                <div class="col-md-4 pb-2">
                    <label class="form-label">Número do CRM:</label>
                    <InputText @bind-Value="Model.NumeroCRM" class="form-control" />
                    <ValidationMessage For="@(() => Model.NumeroCRM)" />
                </div>
                <div class="col-md-4 pb-2">
                    <label class="form-label">Email:</label>
                    <InputText @bind-Value="Model.Email" class="form-control" />
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
                <div class="col-md-4 pb-2">
                    <label class="form-label">Senha:</label>
                    <InputText @bind-Value="Model.Senha" type="password" class="form-control" />
                    <ValidationMessage For="@(() => Model.Senha)" />
                </div>
            </div>
            <div class="d-flex flex-row-reverse bd-highlight">
                <div class="p-2 bd-highlight">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-arrow-right-circle"></i> Salvar
                    </button>
                </div>
                <div class="p-2 bd-highlight">
                    <a href="/usuario/index" class="btn btn-secondary">
                        <i class="bi bi-dash-circle"></i> Cancelar
                    </a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private UsuarioProfissionalViewModel Model { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue && Id.Value > 0)
        {
            await LoadUsuario();
        }
    }

    private async Task LoadUsuario()
    {
        try
        {
            var usuario = await _usuarioApplication.GetAsync(Id.Value);
            if (usuario != null)
            {
                Model = _mapper.Map<UsuarioProfissionalViewModel>(usuario);
            }
            else
            {
                ErrorMessage = "Usuário não encontrado.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Falha ao carregar o usuário. " + ex.Message;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            var usuario = _mapper.Map<Usuario>(Model);

            if (Model.Id == 0)
            {
                await _usuarioApplication.SaveAsync(usuario);
            }
            else
            {
                var usuarioAtualizar = await _usuarioApplication.GetAsync(Model.Id);
                _mapper.Map(usuario, usuarioAtualizar);
                await _usuarioApplication.UpdateAsync(usuarioAtualizar);
            }

            navManager.NavigateTo("/usuario/index");
        }
        catch (Exception ex)
        {
            ErrorMessage = "Falha ao processar os dados. Por favor, tente novamente. " + ex.Message;
        }
    }
}
