@page "/Account/RegistrarPaciente"
@layout EmptyLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using HealthMed.Domain.Interfaces.Application
@using HealthMed.Infra.Repository.Context
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IUsuarioApplication<HealthMedContext> UsuarioApplication


<PageTitle>Registrar Paciente</PageTitle>

<section class="section register d-flex flex-column align-items-center justify-content-center py-4">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6 col-md-8 d-flex flex-column align-items-center justify-content-center">

                <div class="d-flex justify-content-center">
                    @* <img src="/img/pos-tech.png" style="width: 200px; height: auto;" /> *@
                    <h3 class="ms-3" style="color: #1BA085; font-family: 'Arial Black', sans-serif;">POSTECH</h3>
                </div><!-- End Logo -->
                <div class="d-flex justify-content-center py-4">
                    <a href="index.html" class="logo d-flex align-items-center w-auto">
                        <h1 class="ms-3" style="color: #1BA085; font-family: 'Arial Black', sans-serif;">Health Med</h1>
                    </a>
                </div><!-- End Logo -->
                <div class="card mb-3 w-100">
                    <div class="card-body">
                        <StatusMessage Message="@Message" />

                        <div class="pt-4 pb-2">
                            <h5 class="card-title text-center pb-0 fs-4">Criar uma nova conta de Paciente</h5>
                            <p class="text-center small">Informe o e-mail e a senha</p>
                        </div>

                        <!-- Bordered Tabs Justified -->
                        <ul class="nav nav-tabs nav-tabs-bordered d-flex" id="borderedTabJustified" role="tablist">
                            <li class="nav-item flex-fill" role="presentation">
                                <NavLink class="nav-link w-100" href="/Account/Register">Profissional</NavLink>
                            </li>
                            <li class="nav-item flex-fill" role="presentation">
                                <NavLink class="nav-link w-100 active">Paciente</NavLink>
                            </li>
                        </ul>
                        <br /><br />

                        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" FormName="register" OnValidSubmit="RegisterUser">
                            <DataAnnotationsValidator />

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Nome" class="form-control" autocomplete="nome" aria-required="true" placeholder="" />
                                <label for="email">Nome</label>
                                <ValidationMessage For="() => Input.Nome" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Cpf" class="form-control" autocomplete="cpf" aria-required="true" placeholder="" />
                                <label for="email">CPF</label>
                                <ValidationMessage For="() => Input.Cpf" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                <label for="email">Email</label>
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                <label for="password">Password</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                <label for="confirm-password">Confirm Password</label>
                                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Registrar</button>
                        </EditForm>

                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        try
        {
            Usuario usuario = new();
            usuario.Ativo = true;
            usuario.CPF = Input.Cpf;
            usuario.Email = Input.Email;
            usuario.Nome = Input.Nome;
            usuario.Senha = Input.Password;

            await UsuarioApplication.SaveAsync(usuario);
        }
        catch (Exception ex)
        {

            throw;
        }


        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "O Email é um campo obrigatório")]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "O Password é um campo obrigatório")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "O Nome é um campo obrigatório")]
        [Display(Name = "Nome")]
        public string Nome { get; set; } = "";

        [Required(ErrorMessage = "O CPF é um campo obrigatório")]
        [Display(Name = "CPF")]
        public string Cpf { get; set; } = "";


    }
}
